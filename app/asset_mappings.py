from typing import Dict

# Mapping from Fireblocks asset IDs to standardized token symbols
# This needs to be maintained as new assets are added to Fireblocks
ASSET_ID_TO_SYMBOL: Dict[str, str] = {
    'USDT_BSC': 'USDT',
    'TRX_USDT_S2UZ': 'USDT',
    'BTC': 'BTC',
    'SOL': 'SOL',
    'MATIC': 'MATIC',
    'MATIC_POLYGON': 'POL',
    'AVAX': 'AVAX',
    'XTZ': 'XTZ',
    'HBAR': 'HBAR',
    'ALGO': 'ALGO',
    'USDC': 'USDC',
    'LINK': 'LINK',
    'SUSHI': 'SUSHI',
    'AXS': 'AXS',
    'CHZ': 'CHZ',
    'SLP1': 'SLP',
    'EOS': 'EOS',
    'ETH': 'ETH',
    'SHIB': 'SHIB',
    'UNI': 'UNI',
    'DAI': 'DAI',
    'AAVE': 'AAVE',
    'MANA': 'MANA',
    'SAND': 'SAND',
    'ENJ': 'ENJ',
    'ILV': 'ILV',
    'ALICE': 'ALICE',
    'FTM': 'S',
    'GRT': 'GRT',
    'APE_ETH': 'APE',
    'AUDIO': 'AUDIO',
    'OGN': 'OGN',
    'LDO': 'LDO',
    'QNT': 'QNT',
    'MKR': 'MKR',
    'DYDX': 'DYDX',
    'FET': 'FET',
    'PAXG': 'PAXG',
    'FLOKI_ETH': 'FLOKI',
    'GALA2': 'GALA',
    'USDT_ERC20': 'USDT',
    'LTC': 'LTC',
    'BCH': 'BCH',
    'XRP': 'XRP',
    'XLM': 'XLM',
    'ADA': 'ADA',
    'DOGE': 'DOGE',
    'BNB_BSC': 'BNB',
    'CAKE_BSC': 'CAKE',
    'DOT_BSC': 'DOT',
    'ATOM': 'ATOM',
    'NEAR_BSC': 'NEAR',
    'FLOKI2_BSC': 'FLOKI',
    'DOT': 'DOT',
    'FLR': 'FLR',
    'CELESTIA': 'TIA',
    'IMX_ERC20': 'IMX',
    'INJ': 'INJ',
    'RNDR': 'RENDER',
    'ETH-AETH': 'ETH',
    'ARB_ARB_FRK9': 'ARB',
    'TRX': 'TRX',
    'FIL_BSC': 'FIL',
    'ETC': 'ETC',
    'SNX': 'SNX',
    'RON': 'RON',
    'BONK_SOL': 'BONK',
    'CRV': 'CRV',
    'COMP': 'COMP',
    'KSM': 'KSM',
    'STORJ': 'STORJ',
    'ORCA_SOL': 'ORCA',
    '$WIF_SOL': '$WIF',
    'PENDLE': 'PENDLE',
    'ONDO_ETH_TGXH': 'ONDO',
    'MEM': 'MEME',
    'BOME_SOL': 'BOME',
    'W_SOL': 'W',
    'ZRO_ETH_W9BI': 'ZRO',
    'INJ_INJ': 'INJ',
    'HNT_SOL': 'HNT',
    'POL_ETH_9RYQ': 'POL',
    'RENDER_SOL': 'RENDER',
    'BABYDOGE_ETH_F5D8': '1MBABYDOGE',
    'TURBO_ETH_E4WD': 'TURBO',
    'GMT1_BSC': 'GMT',
    'PEPE_ETH_W7Z5': 'PEPE',
    'WLD_ETH_WMUS': 'WLD',
    'FLOW_BSC': 'FLOW',
    'VET_BSC_A9Q5': 'VET',
    'EGLD_BSC': 'EGLD',
    'SOL_USDT_EWAY': 'USDT',
    'USDT_POLYGON': 'USDT',
    'GMT_SOL': 'GMT',
    'SONIC': 'S',
    'WLD_B7DRHSD9_4C2M': 'WLD',
    'TRUMP_B6KKMHK5_E95U': 'TRUMP',
    'USDT_TON': 'USDT',
}

def get_symbol_from_asset_id(asset_id: str) -> str:
    """Get the standardized token symbol from a Fireblocks asset ID"""
    return ASSET_ID_TO_SYMBOL.get(asset_id)

def get_ex_symbol_from_asset_id(asset_id: str, exchange: str) -> str | None:
    if exchange == 'Kraken' and ' ' in asset_id:
        return None
    else:
        return asset_id


